apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "org.flyve.admin.dashboard"
        minSdkVersion 16
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    dexOptions {
        preDexLibraries true
        maxProcessCount 8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
    }
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation('tools.fastlane:screengrab:1.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:recyclerview-v7:27.0.1'
    implementation 'com.android.support:appcompat-v7:27.0.1'
    implementation 'com.android.support:design:27.0.1'
    implementation 'com.android.support:support-v4:27.0.1'
    implementation 'com.orhanobut:logger:2.1.1'
    implementation 'com.android.support:multidex:1.0.2'

}

import java.util.regex.Pattern

task updateVersionCode {
    doLast {
        if (project.hasProperty("vCode")) {
            def manifestFile = file("src/main/AndroidManifest.xml")
            def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
            def manifestText = manifestFile.getText()
            def matcher = pattern.matcher(manifestText)
            matcher.find()

            def manifestContent = matcher.replaceAll("versionCode=\"" + vCode + "\"")
            println "Version Code: " + vCode
            manifestFile.write(manifestContent)
        } else {
            println "please run: updateVersionCode -P vCode="
        }
    }
}








task updateVersionName {
    doLast {
        if (project.hasProperty("vName")) {
            def manifestFile = file("src/main/AndroidManifest.xml")
            def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)(?:\\S*)\"")
            def manifestText = manifestFile.getText()
            def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
            matcherVersionNumber.find()

            def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + vName + "\"")
            manifestFile.write(manifestContent)

            println "Version name: " + vName
        } else {
            println "please run: updateVersionName -P vName="
        }
    }
}